/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Trainer as PrismaTrainer,
  ClassModel as PrismaClassModel,
} from "@prisma/client";

export class TrainerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.TrainerCountArgs, "select">): Promise<number> {
    return this.prisma.trainer.count(args);
  }

  async trainers(args: Prisma.TrainerFindManyArgs): Promise<PrismaTrainer[]> {
    return this.prisma.trainer.findMany(args);
  }
  async trainer(
    args: Prisma.TrainerFindUniqueArgs
  ): Promise<PrismaTrainer | null> {
    return this.prisma.trainer.findUnique(args);
  }
  async createTrainer(args: Prisma.TrainerCreateArgs): Promise<PrismaTrainer> {
    return this.prisma.trainer.create(args);
  }
  async updateTrainer(args: Prisma.TrainerUpdateArgs): Promise<PrismaTrainer> {
    return this.prisma.trainer.update(args);
  }
  async deleteTrainer(args: Prisma.TrainerDeleteArgs): Promise<PrismaTrainer> {
    return this.prisma.trainer.delete(args);
  }

  async findClasses(
    parentId: string,
    args: Prisma.ClassModelFindManyArgs
  ): Promise<PrismaClassModel[]> {
    return this.prisma.trainer
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .classes(args);
  }
}
